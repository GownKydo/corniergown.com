<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Gerardo H. Gomez</title>
        <link>http://localhost:1313/post/</link>
        <description>Recent content in Posts on Gerardo H. Gomez</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Gerardo H. Gomez</copyright>
        <lastBuildDate>Thu, 06 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Administracion de tareas cron</title>
        <link>http://localhost:1313/p/administracion-de-tareas-cron/</link>
        <pubDate>Thu, 06 Jun 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/administracion-de-tareas-cron/</guid>
        <description>&lt;img src="http://localhost:1313/p/administracion-de-tareas-cron/CronJob.jpg" alt="Featured image of post Administracion de tareas cron" /&gt;&lt;br&gt;
&lt;h2 id=&#34;hola-a-todos&#34;&gt;¡Hola a todos!
&lt;/h2&gt;&lt;p&gt;En esta ocasión, vamos a abordar el fascinante tema de las tareas cron, como se indica en el título. Para comenzar, vamos a adentrarnos en el concepto de qué es una tarea cron y su importancia en la administración de sistemas&lt;/p&gt;
&lt;h2 id=&#34;qué-es-una-tarea-cron&#34;&gt;¿Qué es una tarea cron?
&lt;/h2&gt;&lt;p&gt;Cron es un demonio que ejecuta comandos en horarios definidos por el administrador. Está diseñado para simplificar tareas repetitivas que, de otro modo, tendrían que ejecutarse manualmente.&lt;/p&gt;
&lt;p&gt;Cada tarea gestionada por cron es conocida como un &lt;strong&gt;&amp;ldquo;cron job&amp;rdquo;&lt;/strong&gt;, la cual se especifica en una tabla llamada &lt;strong&gt;&amp;ldquo;cron tab&amp;rdquo;&lt;/strong&gt;. Cada línea en la crontab representa una tarea y consta de una combinación de hora y fecha seguida del comando a ejecutar. Estas tareas pueden ejecutarse en segundo plano, permitiendo que los comandos se ejecuten automáticamente en el momento deseado por el administrador.&lt;/p&gt;
&lt;h3 id=&#34;limitaciones-de-una-tarea-cron&#34;&gt;Limitaciones de una tarea cron
&lt;/h3&gt;&lt;p&gt;A pesar de sus beneficios cron tiene sus limitaciones.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Ejecucion en redes distribuidas:&lt;/strong&gt; Cron no está diseñado para ejecutarse en una red distribuida, lo que significa que no puede coordinar tareas entre varios servidores o terminales de red. Esta limitación puede ser un inconveniente en entornos de alta disponibilidad y sistemas distribuidos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Capacidades avanzadas de gestion:&lt;/strong&gt; Aunque cron es una herramienta poderosa y sencilla, no cuenta con capacidades avanzadas para la gestión de tareas, como el manejo de dependencias entre tareas o la detección y recuperación automática de fallos. Esto puede limitar su uso en sistemas más complejos donde estas características son esenciales.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;estructura-de-una-tarea-cron&#34;&gt;Estructura de una tarea cron
&lt;/h3&gt;&lt;p&gt;Las tareas cron tienen la siguiente estrucutra, estan divididas en 5 grupos y dos mas que identifican que usuario esta ejecutando la tarea y el comando o script que se esta corriendo.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;center&gt; minutes &lt;/center&gt;&lt;/th&gt;
&lt;th&gt;&lt;center&gt; hours &lt;/center&gt;&lt;/th&gt;
&lt;th&gt;&lt;center&gt; day month &lt;/center&gt;&lt;/th&gt;
&lt;th&gt;&lt;center&gt; month &lt;/center&gt;&lt;/th&gt;
&lt;th&gt;&lt;center&gt; day week &lt;/center&gt;&lt;/th&gt;
&lt;th&gt;&lt;center&gt; user &lt;/center&gt;&lt;/th&gt;
&lt;th&gt;&lt;center&gt; script/command &lt;/center&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;center&gt; 0-59 &lt;/center&gt;&lt;/td&gt;
&lt;td&gt;&lt;center&gt; 0-23 &lt;/center&gt;&lt;/td&gt;
&lt;td&gt;&lt;center&gt; 1-31 &lt;/center&gt;&lt;/td&gt;
&lt;td&gt;&lt;center&gt; 1-12 &lt;/center&gt;&lt;/td&gt;
&lt;td&gt;&lt;center&gt; 0-6 &lt;/center&gt;&lt;/td&gt;
&lt;td&gt;&lt;center&gt; user &lt;/center&gt;&lt;/td&gt;
&lt;td&gt;&lt;center&gt; /path/test.sh &lt;/center&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;center&gt;  * &lt;/center&gt;&lt;/td&gt;
&lt;td&gt;&lt;center&gt; * &lt;/center&gt;&lt;/td&gt;
&lt;td&gt;&lt;center&gt; * &lt;/center&gt;&lt;/td&gt;
&lt;td&gt;&lt;center&gt; * &lt;/center&gt;&lt;/td&gt;
&lt;td&gt;&lt;center&gt; * &lt;/center&gt;&lt;/td&gt;
&lt;td&gt;&lt;center&gt;  &lt;/center&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Caracteres especiales:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tambien tenemos los caracteres especiales, los cuales nos ayudar a facilitar la redaccion de las tareas o crear procesos mucho mas complejos y como tal mucho mas precisos.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;center&gt; Caracter &lt;/center&gt;&lt;/th&gt;
&lt;th&gt;&lt;center&gt; Definicion &lt;/center&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;center&gt; * &lt;/center&gt;&lt;/td&gt;
&lt;td&gt;Rellena un campo sin ningun valor especifico&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;center&gt; / &lt;/center&gt;&lt;/td&gt;
&lt;td&gt;Especificar un intervalo de tiempo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;center&gt; , &lt;/center&gt;&lt;/td&gt;
&lt;td&gt;Seleccionar multiples valores&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;center&gt; - &lt;/center&gt;&lt;/td&gt;
&lt;td&gt;Especificar un rango especifico&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Una vez sabemos todo esto, ya podremos empezar a crear nuestras propias reglas. Pero es probable que, si queremos hacer alguna muy compleja, sea necesario tener algunos conocimientos de programación. Sobre todo, para comprender la estructura de cómo se va a ejecutar alguna tarea concreta. Y en caso de que falle, sabes donde se puede estar produciendo el problema en cuestión.&lt;/p&gt;
&lt;h2 id=&#34;practicando-con-tareas-cron&#34;&gt;Practicando con tareas cron
&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Es importante mencionar que las pruebas de esta práctica se realizan en sistemas operativos basados en Arch. Por lo tanto, algunos comandos pueden diferir de aquellos utilizados en otros sistemas operativos basados en Debian o sistemas basados en RHE(red hat enterprise).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Para empezar, debemos convertirnos en usuarios root para poder administrar las tareas cron. Una vez con permisos de root, navegamos a la ruta &lt;code&gt;/etc/cron.d&lt;/code&gt;, donde se encuentran las tareas. Dentro del directorio, verificaremos el estado de nuestro demonio cron con el siguiente comando: &lt;code&gt;systemctl status cronie&lt;/code&gt;. En sistemas basados en Debian, se debe cambiar la palabra &lt;em&gt;cronie&lt;/em&gt; por &lt;em&gt;cron&lt;/em&gt;, o de igual forma pueden usar el siguiente comando &lt;code&gt;service cron status&lt;/code&gt;. Una vez escrito el comando, obtendremos el siguiente resultado:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;● cronie.service - Command Scheduler
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     Loaded: loaded &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;/usr/lib/systemd/system/cronie.service&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; enabled&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; preset: disabled&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     Active: active &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;running&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; since Fri 2024-06-07 16:04:45 EST&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 8s ago
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   Main PID: &lt;span class=&#34;m&#34;&gt;6880&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;crond&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      Tasks: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;limit: 6988&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     Memory: 888.0K &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;peak: 1000.0K&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        CPU: 3ms
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     CGroup: /system.slice/cronie.service
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             └─6880 /usr/sbin/crond -n
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Jun &lt;span class=&#34;m&#34;&gt;07&lt;/span&gt; 16:04:45 kinghost systemd&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: Started Command Scheduler.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Jun &lt;span class=&#34;m&#34;&gt;07&lt;/span&gt; 16:04:45 kinghost crond&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;6880&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;CRON&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; STARTUP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1.7.2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Jun &lt;span class=&#34;m&#34;&gt;07&lt;/span&gt; 16:04:45 kinghost crond&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;6880&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;CRON&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; INFO &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Syslog will be used instead of sendmail.&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Jun &lt;span class=&#34;m&#34;&gt;07&lt;/span&gt; 16:04:45 kinghost crond&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;6880&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;CRON&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; INFO &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;RANDOM_DELAY will be scaled with factor 92% &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; used.&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Jun &lt;span class=&#34;m&#34;&gt;07&lt;/span&gt; 16:04:45 kinghost crond&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;6880&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;CRON&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; INFO &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;running with inotify support&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Jun &lt;span class=&#34;m&#34;&gt;07&lt;/span&gt; 16:04:45 kinghost crond&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;6880&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;CRON&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; bad &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;/etc/cron.d/0hourly&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Jun &lt;span class=&#34;m&#34;&gt;07&lt;/span&gt; 16:04:45 kinghost crond&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;6880&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;CRON&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; INFO &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;@reboot &lt;span class=&#34;nb&#34;&gt;jobs&lt;/span&gt; will be run at computer&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;s startup.&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Aquí podemos notar que el servicio ya está activado. Si en tu sistema está desactivado, escribe el siguiente comando para activarlo: &lt;code&gt;systemctl start cronie&lt;/code&gt;. En sistemas de debian tambien podemos usar esta alternativa &lt;code&gt;service cron start&lt;/code&gt;. Posteriormente, vuelve a escribir el comando para verificar el estado de nuestro demonio cron y ya debería estar activo.&lt;/p&gt;
&lt;h3 id=&#34;creando-una-tarea-cron&#34;&gt;Creando una tarea cron
&lt;/h3&gt;&lt;p&gt;Ahora vamos a crear una tarea cron. Para este caso, dentro de la ruta en la que estamos que es &lt;code&gt;/etc/cron.d&lt;/code&gt;, crearemos un archivo que puede llevar el nombre que desees. En mi caso, lo llamaré &amp;ldquo;&lt;em&gt;tarea&lt;/em&gt;&amp;rdquo;. Escribiremos el siguiente comando para crear el archivo: &lt;code&gt;touch tarea&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Luego, procedemos a abrirlo con el editor de texto de preferencia y una vez dentro, escribimos la estructura de una tarea cron, que está dividida en cinco campos como lo explique anteriormente, colocare los 5 campos con asteriscos, esto le indica a el servicio cron que quiero que se ejecute cada minuto. Esta seria la estructura de nuestro archivo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* * * * * root /home/gerardokydo/Desktop/file.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Y como sabemos que este archivo &amp;ldquo;file.sh&amp;rdquo; no existe, vamos a crearlo. Nos dirigimos a la ruta &amp;ldquo;Desktop&amp;rdquo; de nuestro usuario normal y creamos el archivo usando el comando &lt;code&gt;touch file.sh&lt;/code&gt;. Una vez que el archivo esté creado, le daremos permisos de ejecución con el siguiente comando: &lt;code&gt;chmod +x file.sh&lt;/code&gt;. Luego procedemos a editarlo con nuestro editor preferido y escribimos la tarea que deseamos que realice. A modo de ejemplo, escribimos lo siguiente:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sleep &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rm -rf /tmp/*
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;En este script, &lt;code&gt;sleep 10&lt;/code&gt; hace una pausa de 10 segundos y &lt;code&gt;rm -rf /tmp/*&lt;/code&gt; borra todos los archivos en el directorio &lt;code&gt;/tmp/&lt;/code&gt;. Guardamos el archivo y en este punto nuestro demonio cron debería estar ejecutándose correctamente.&lt;/p&gt;
&lt;h2 id=&#34;abuso-de-tareas-cron&#34;&gt;Abuso de tareas cron
&lt;/h2&gt;&lt;p&gt;Es importante destacar que, en términos de seguridad, es crucial administrar adecuadamente el acceso al sistema cron. Cualquier usuario con permisos puede modificar su propio archivo crontab, lo que podría permitir la ejecución de comandos con privilegios de usuario. Por lo tanto, se recomienda limitar el acceso a cron solo a usuarios autorizados y revisar regularmente los archivos de crontab para evitar abusos o errores.&lt;/p&gt;
&lt;p&gt;A continuación, presentamos un ejemplo de abuso de tareas cron. Este ejemplo se realiza con fines educativos en un entorno controlado y sin afectar a nadie. La intención es demostrar cómo un uso indebido de cron puede comprometer la seguridad del sistema y cómo podemos prevenirlo mediante buenas prácticas.&lt;/p&gt;
&lt;h3 id=&#34;deteccion-de-tareas-cron&#34;&gt;Deteccion de tareas cron
&lt;/h3&gt;&lt;p&gt;Vamos a realizar una detección de tareas cron con el objetivo de buscar archivos en la raíz que puedan ser modificados por un usuario sin permisos de root. Esto se puede hacer de dos formas: manualmente mediante un script en bash, o utilizando una herramienta en Linux llamada &lt;strong&gt;pspy&lt;/strong&gt; que está escrita en Go. Sin embargo, para entender mejor cómo detectar tareas cron, lo haremos de forma manual, lo que también nos ayudará a comprender la lógica subyacente.&lt;/p&gt;
&lt;p&gt;Para esta ocasión, vamos a utilizar el comando &lt;code&gt;ps&lt;/code&gt;. Este comando, con ciertos parámetros, puede listar los comandos que se están ejecutando en tiempo real en el sistema, lo cual es muy útil para monitorear y detectar tareas cron. Además, utilizaremos el comando &lt;code&gt;diff&lt;/code&gt;, que permite comparar dos archivos y mostrar sus diferencias. Esta combinación de herramientas nos ayudará a identificar cambios en los procesos y archivos del sistema. Si quieres saber mas acerca de los comandos y sus diferentes parametors les dejare al final del blog el manual page de cada uno de los comandos presentados en este post.&lt;/p&gt;
&lt;p&gt;Continuemos. Vamos a crear un archivo en nuestro escritorio con el siguiente comando: &lt;code&gt;touch MonitorProcess.sh&lt;/code&gt;, le asignamos los permisos de ejecucion con el siguiente comando: &lt;code&gt;chmod +x MonitorProcess.sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Luego, lo abrimos con el editor de texto de nuestra preferencia. Una vez dentro del archivo, escribimos el siguiente código:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;old_process&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;ps -eo &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; true&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;new_process&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;ps -eo &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;diff_result&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;diff &amp;lt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$old_process&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &amp;lt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$new_process&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$diff_result&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;[\&amp;gt;\&amp;lt;]&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -v &lt;span class=&#34;s2&#34;&gt;&amp;#34;kworker&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;old_process&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$new_process&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Una vez tengamos el codigo, vamos a repasar lo que hemos escrito:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Empezamos definiendo las cabeceras principales de nuestro codigo las cuales se identifican al inicio del mismo &lt;code&gt;#!/bin/bash.&lt;/code&gt;
&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creamos una variable llamada &amp;ldquo;&lt;em&gt;old_process&lt;/em&gt;&amp;rdquo; la cual va a guardar el output de nuestro comando &lt;code&gt;ps -eo command&lt;/code&gt;. Si escribimos dicho comando desde nuestra terminal tendremos los procesos listados que se estan ejecutando en tiempo real.
&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creamos un bucle while infinito para ir actualizando los cambios de los procesos:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Dentro de este mismo bucle, creamos una variable llamada &amp;ldquo;&lt;em&gt;new_process&lt;/em&gt;&amp;rdquo; la cual va a guardar los nuevos procesos que vayan apareciendo.
&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Haciendo uso del comando &lt;code&gt;diff&lt;/code&gt;  creamos una nueva variable llamada &amp;ldquo;&lt;em&gt;diff_result&lt;/em&gt;&amp;rdquo; que guardara el output del comando diff, a este comando le pasamos por parametros que evalue la diferencia de las variables &amp;ldquo;&lt;em&gt;old_process&lt;/em&gt;&amp;rdquo; y &amp;ldquo;&lt;em&gt;new_process&lt;/em&gt;&amp;rdquo;
&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Posteriormente con el comando &lt;code&gt;echo&lt;/code&gt; imprimimos el contenido de nuestra variable &amp;ldquo;&lt;em&gt;diff_result&lt;/em&gt;&amp;rdquo; y con la ayuda del comando &lt;code&gt;grep&lt;/code&gt; y el parametro &lt;code&gt;-v&lt;/code&gt; filtramos los procesos que se &lt;em&gt;cierran(&amp;lt;)&lt;/em&gt; y los que se &lt;em&gt;abren(&amp;gt;)&lt;/em&gt; tambien filtramos por los procesos no deseados para que no los tome en cuenta, en mi caso todos aquellos que contiene la palabra &amp;ldquo;&lt;em&gt;kworker&lt;/em&gt;&amp;rdquo;
&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Y para concluir con el programa solo actualizamos nuestra variable &amp;ldquo;_old_process&amp;rdquo; igualadnola a nuestra variable &amp;ldquo;&lt;em&gt;new_process&lt;/em&gt;&amp;rdquo;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Una vez que tengamos pasando este punto procedemos a correr el codigo y si esperan un tiempo podran notar que este estara listando los procesos que se estan ejecutando en tu sistema, esto va desde configuraciones que has hecho, aplicaciones abiertas, pero lo que nos va a importar es cuando aparezca algo relacionado a las tareas cron, por ejemplo lo siguiente:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt; /usr/sbin/CROND -n
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt; /bin/bash /home/gerardokydo/Desktop/file.sh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt; sleep &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;udev-worker&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; /bin/sh /usr/bin/tlp auto
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; /usr/bin/perl /usr/share/tlp/tlp-readconfs --outfile /run/tlp/tlp-run.conf_tmp9CBkvC
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt; /usr/bin/perl /usr/share/tlp/tlp-readconfs --outfile /run/tlp/tlp-run.conf_tmp9CBkvC
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; /bin/sh /usr/bin/tlp auto
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; cat /sys/class/power_supply/AC/online
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt; /bin/sh /usr/bin/tlp auto
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt; cat /sys/class/power_supply/AC/online
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt; /bin/sh /usr/bin/tlp auto
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;En mi caso, estos fueron los procesos que se listaron. El más relevante es el que se encuentra en las primeras líneas, donde podemos observar que se está ejecutando el demonio &lt;code&gt;/usr/sbin/CROND -n&lt;/code&gt; y, a su vez, este ejecuta nuestro archivo &amp;ldquo;&lt;em&gt;file.sh&lt;/em&gt;&amp;rdquo; almacenado en nuestro escritorio. Recordarán que este archivo hace un &lt;code&gt;sleep 10&lt;/code&gt; y posteriormente borra todo lo que está en la carpeta &amp;ldquo;&lt;em&gt;/tmp/&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Ahora, suponiendo que soy un atacante y noto este registro de procesos, investigaría más acerca de este fichero. Por lo tanto, escribiría el siguiente comando: &lt;code&gt;ls -l /home/gerardokydo/Desktop/file.sh&lt;/code&gt;, lo que me dara el siguiente resultado:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-rwxr-xrwx 1 gerardokydo gerardokydo 36 Jun 7 /home/gerardokydo/Desktop/file.sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Podemos observar que el propietario de este archivo ha habilitado la edición del archivo para el grupo &amp;ldquo;otros&amp;rdquo;. Esto significa que cualquier usuario en el sistema, independientemente de sus permisos, puede modificar este archivo. Como un usuario no privilegiado, puedo explotar esta configuración incorrecta de permisos para obtener privilegios elevados.&lt;/p&gt;
&lt;p&gt;Primero, nos dirigimos a la ruta donde se encuentra el archivo. Dado que el archivo está siendo ejecutado por el usuario root, podemos cambiar su contenido para ejecutar comandos con privilegios de root. Esto es una vulnerabilidad seria que permite a un usuario no autorizado ejecutar acciones que normalmente estarían restringidas.&lt;/p&gt;
&lt;p&gt;Para modificar el contenido del archivo, utilizamos el siguiente comando:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chmod &lt;span class=&#34;m&#34;&gt;4775&lt;/span&gt; /bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Este script le asigna privilegios &lt;strong&gt;SUID&lt;/strong&gt; a nuestra shell. El bit &lt;strong&gt;SUID&lt;/strong&gt; permite que un archivo ejecutable se ejecute con los permisos del propietario del archivo, en este caso, root. Guardamos los cambios y salimos del archivo&lt;/p&gt;
&lt;p&gt;Si ahora escribimos &lt;code&gt;ls -l /bin/bash&lt;/code&gt;, vamos a notar los privilegios, que se verían de la siguiente manera:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rwxr-xr-x root root 1.1 MB Tue Jan 23 16:22:43 2024 /bin/bash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Para monitorear los cambios en los permisos, utilizaremos el comando &lt;code&gt;watch -n 1 ls -l /bin/bash&lt;/code&gt;, que actualizará la visualización cada segundo para mostrar el cambio en los permisos realizado por el script. Notaremos una letra &amp;rsquo;s&amp;rsquo; en los permisos:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-rwsrwxr-x 1 root root 1112784 Jan 23 16:22 /bin/bash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Esto sucede porque ahora &lt;strong&gt;SUID&lt;/strong&gt; está activado. Esto nos permite ejecutar el binario con los permisos del propietario del archivo, en este caso, root.&lt;/p&gt;
&lt;p&gt;Para lanzar una shell con los privilegios del propietario (root), escribimos &lt;code&gt;bash -p&lt;/code&gt;. Al presionar Enter, veremos que ahora somos usuario root. Podemos confirmarlo con el comando &lt;code&gt;whoami&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Con esto, hemos demostrado la importancia de una correcta configuración de las tareas cron. Si un atacante detecta archivos que se están ejecutando con permisos inadecuados, puede explotarlos para obtener privilegios elevados. Es crucial asegurar que los permisos estén correctamente configurados para prevenir intrusiones por parte de usuarios no autorizados.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;referencias&#34;&gt;Referencias
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.man7.org/linux/man-pages/man1/systemctl.1.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;systemctl(1) — Linux manual page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.man7.org/linux/man-pages/man1/ps.1.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ps(1) — Linux manual page&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.man7.org/linux/man-pages/man1/diff.1.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;diff(1) — Linux manual page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.man7.org/linux/man-pages/man1/grep.1.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;grep()1 — Linux manual page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.man7.org/linux/man-pages/man1/watch.1.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;watch(1) — Linux manual page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Comandos Basicos en Linux - Parte 1</title>
        <link>http://localhost:1313/p/comandos-basicos-en-linux-parte-1/</link>
        <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/comandos-basicos-en-linux-parte-1/</guid>
        <description>&lt;img src="http://localhost:1313/p/comandos-basicos-en-linux-parte-1/wallpaper.jpg" alt="Featured image of post Comandos Basicos en Linux - Parte 1" /&gt;&lt;p&gt;En esta ocasión, como se menciona en el título, vamos a adentrarnos en el mundo de Linux. Este post está dirigido a aquellos que son nuevos en este sistema operativo, con el fin de ayudarles y guiarlos en el uso de la terminal sin temor a romper algo con algún comando.&lt;/p&gt;
&lt;p&gt;Este post será muy práctico, y para ello me guiaré de una página que considero increíble para aprender sobre los comandos en Linux. Para dar un breve resumen, esta página consiste en un juego de desafios en seguridad informatica. Tendrás que usar comandos en Linux para encontrar un archivo .txt donde se encuentra una contraseña para un usuario. A medida que subes de nivel, la dificultad aumenta. Para avanzar, deberás encontrar una &amp;ldquo;flag&amp;rdquo; para cada usuario, lo que representa los diferentes niveles y la flag la contraseña de acceso a los mismos.&lt;/p&gt;
&lt;p&gt;Espero que este post te sea de gran ayuda y te anime a explorar más sobre el fascinante mundo de Linux. ¡Empecemos!&lt;/p&gt;
&lt;p&gt;Nos diriguimos a la siguiente pagina &lt;a class=&#34;link&#34; href=&#34;https://overthewire.org/wargames/bandit/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;over the wire&lt;/a&gt;, nos llevara a esta pagina:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/content/post/BasicCommandsOnLinuxPart1/Bandit0Menu.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Menu&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;level-0---level-1&#34;&gt;Level 0 -&amp;gt; Level 1
&lt;/h1&gt;&lt;p&gt;Aquí puedes leer más sobre lo que trata Bandit y en qué consiste. Nos dirigiremos al nivel 0, donde podemos ver las instrucciones para acceder como bandit0 y conectarnos al servidor mediante el comando SSH. Una vez que hemos leído las instrucciones, pasamos al siguiente nivel. En el siguiente nivel, podemos observar que nos dan las siguientes instrucciones.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/content/post/BasicCommandsOnLinuxPart1/bandit0.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;bandit0&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Aquí ya podemos observar que las instrucciones nos indican que la contraseña para el siguiente nivel se encuentra en un archivo llamado &amp;ldquo;&lt;em&gt;readme&lt;/em&gt;&amp;rdquo;, localizado en el directorio home de nuestro usuario &amp;ldquo;&lt;em&gt;bandit0&lt;/em&gt;&amp;rdquo;. Vamos a confirmarlo. Como aún no me he conectado al juego, vamos a hacerlo.&lt;/p&gt;
&lt;p&gt;En el nivel 0 se especifica que se debe usar &lt;code&gt;ssh&lt;/code&gt; para acceder al servidor. Nos proporcionan un nombre de host, un puerto y la contraseña. La estructura del comando para acceder al nivel cero es la siguiente: &lt;code&gt;ssh bandit0@bandit.labs.overthewire.org -p 2220&lt;/code&gt;. Si es nuestra primera vez usando el comando ssh, nos preguntará si estamos seguros de acceder al servidor. Entonces, escribimos &amp;lsquo;Y/y&amp;rsquo; o simplemente &amp;ldquo;yes&amp;rdquo;. A continuación, nos pedirá la contraseña del usuario bandit0, la cual es &lt;strong&gt;bandit0&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Una vez dentro del servidor, comprobamos que somos el usuario bandit0 con el comando &lt;code&gt;whoami&lt;/code&gt;. Este comando nos sirve para saber qué usuario está usando el sistema actualmente y, si todo está bien, podemos observar claramente que se trata del usuario &amp;ldquo;bandit0&amp;rdquo;. Posteriormente, escribimos el comando &lt;code&gt;ls&lt;/code&gt; para listar el contenido de nuestro directorio home y ahí es donde se encuentra el archivo &amp;ldquo;&lt;em&gt;readme&lt;/em&gt;&amp;rdquo; que contiene la contraseña para acceder a &amp;ldquo;bandit1&amp;rdquo;. Escribimos el comando &lt;code&gt;cat readme&lt;/code&gt; para leer el contenido de este archivo y, como se puede observar, esa es la contraseña para el siguiente nivel, la copiamos en nuestro portapapeles y del servidor con el comando &lt;code&gt;exit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/content/post/BasicCommandsOnLinuxPart1/img/level0/level0.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;level0&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;level-1---level-2&#34;&gt;Level 1 -&amp;gt; Level 2
&lt;/h1&gt;&lt;p&gt;Para el siguiente nivel, vamos a acceder como bandit1. Vamos a usar el mismo comando que usamos anteriormente con bandit0, pero cambiando el usuario. El comando es el siguiente: &lt;code&gt;ssh bandit1@bandit.labs.overthewire.org -p 2220&lt;/code&gt;. La única diferencia será el número del usuario, todo lo demás se mantiene igual. Accedemos y, una vez que nos pida la contraseña y pegamos la que habíamos guardado anteriormente en nuestro portapapeles.&lt;/p&gt;
&lt;p&gt;Las instrucciones para el siguiente nivel son las siguientes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/content/post/BasicCommandsOnLinuxPart1/img/level1/instructions_level1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;instructions_level1&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Nos especifica que la contraseña está guardada en un archivo localizado en el directorio home con el nombre &amp;lsquo;-&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;El desafío parece simple, pero el problema surge cuando escribimos el comando &lt;code&gt;cat -&lt;/code&gt;. Este se queda en espera, ya que lo toma como si fuera un parámetro de &lt;code&gt;cat&lt;/code&gt;. Entonces, ¿cómo solucionamos esto? Para poder resolver este desafío, podemos hacerlo de varias formas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Desde la ruta absoluta:&lt;/strong&gt; &lt;code&gt;cat /home/bandit1/-&lt;/code&gt;. De esta forma, indicamos la ruta completa del archivo, evitando que &lt;code&gt;cat&lt;/code&gt; lo confunda con un parámetro.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Forma alternativa:&lt;/strong&gt; &lt;code&gt;cat $(pwd)/-&lt;/code&gt;. Usando este método, nos ahorramos escribir toda la ruta. El comando &lt;code&gt;pwd&lt;/code&gt; nos da la ruta actual, y usamos esa salida para que &lt;code&gt;cat&lt;/code&gt; interprete correctamente la ubicación del archivo. Esto se especifica usando los símbolos &lt;code&gt;$()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Indicando la ruta actual:&lt;/strong&gt; &lt;code&gt;cat ./-&lt;/code&gt;. De esta forma, indicamos que desde la ruta actual en la que nos encontramos (representada por un punto), y se lee el archivo con el nombre &amp;ldquo;-&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Observamos que, de cualquiera de estas maneras, obtenemos la contraseña.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/content/post/BasicCommandsOnLinuxPart1/img/level1/level1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;level1&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Aqui conluimos con este nivel, nos salimos y accedemos al siguiente.&lt;/p&gt;
&lt;h1 id=&#34;level-2---level-3&#34;&gt;Level 2 -&amp;gt; level 3
&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/content/post/BasicCommandsOnLinuxPart1/img/level2/instructions.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;instructions&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Para este nivel, observamos que hay un archivo llamado &amp;ldquo;&lt;em&gt;spaces in this filename&lt;/em&gt;&amp;rdquo;. Para poder leer este tipo de archivos con espacios, necesitamos escapar cada espacio con el carácter especial barra inversa &lt;code&gt;\&lt;/code&gt;, quedando así el comando: &lt;code&gt;cat spaces\ in\ this\ filename&lt;/code&gt;. De igual forma, podemos ahorrarnos esto usando la tecla tab, la cual nos autocompleta lo mencionado anteriormente.&lt;/p&gt;
&lt;p&gt;Otra forma de hacer este proceso es usando comillas dobles, quedando de esta manera: &lt;code&gt;cat &amp;quot;spaces in this filename&amp;quot;&lt;/code&gt;. De esta forma, le indicamos el nombre del archivo.&lt;/p&gt;
&lt;p&gt;Pero además de hacer eso, también podemos ahorrarnos escribir el nombre. Para hacer esto más rápido, hacemos uso del carácter especial asterisco &lt;code&gt;*&lt;/code&gt;, el cual interpreta cualquier cosa, quedando así el comando: &lt;code&gt;cat *filename&lt;/code&gt;. De esta forma, le indicamos que queremos leer todos los archivos que terminen en &amp;ldquo;filename&amp;rdquo;. Igualmente, se puede modificar el orden del asterisco, por ejemplo: &lt;code&gt;cat spaces*&lt;/code&gt;, aquí se indica que queremos leer todos los archivos que comiencen con el nombre &amp;ldquo;spaces&amp;rdquo;. Cabe aclarar que este comando es mejor usarlo cuando sabemos que solo existe un archivo con ese nombre; en caso contrario, listará el contenido de todos los archivos que encuentre.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/content/post/BasicCommandsOnLinuxPart1/img/level2/level2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;level2&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Ahora que tenemos la contraseña nos dirigimos al siguiente nivel.&lt;/p&gt;
&lt;h1 id=&#34;level-3---level-4&#34;&gt;Level 3 -&amp;gt; Level 4
&lt;/h1&gt;&lt;p&gt;Para este nivel la contraseña esta guardada en un archivo oculto dentro del directorio &amp;ldquo;inhere&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Este nivel es muy simple, si listamos el contenido de la carpeta con el comando &lt;code&gt;ls&lt;/code&gt;, sabremos que a simple vista nos e ve nada, para ello vamos a hacer uso de los parametros de dicho comando, usaremos el parametro &lt;code&gt;-a&lt;/code&gt; para listar todo lo que se encuentre a dentro quedando asi el comando: &lt;code&gt;ls -a inhere&lt;/code&gt;. Y ahora podemos observar que hay un archivo con el nombre &amp;ldquo;&amp;hellip;Hiding-From-You&amp;rdquo;, con el comando cat revisamos el contenido y tendremos la contraseña.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/content/post/BasicCommandsOnLinuxPart1/img/level3/download.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;download.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;level-4---level-5&#34;&gt;Level 4 -&amp;gt; level 5
&lt;/h1&gt;&lt;p&gt;Para este nivel, se nos indica que la contraseña está guardada en un archivo humanamente legible, dentro del directorio &amp;ldquo;inhere&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Si listamos el contenido del directorio, podemos notar que hay múltiples archivos con distintos nombres. Dado que no todos tienen contenido legible y para evitar abrir e inspeccionar uno por uno, vamos a identificar el archivo correcto con los comandos &lt;code&gt;file&lt;/code&gt; y &lt;code&gt;find&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;El comando &lt;code&gt;file&lt;/code&gt; nos permite saber la clasificación de cada archivo: si es una imagen, un archivo de texto, un binario, un video, etc. El comando &lt;code&gt;find&lt;/code&gt; es una alternativa al comando &lt;code&gt;ls&lt;/code&gt;, con la diferencia de que &lt;code&gt;find&lt;/code&gt; busca desde la raíz de la ruta que se le pase. Por ejemplo, si escribimos el comando &lt;code&gt;find inhere&lt;/code&gt;, este nos listará el contenido en forma de lista usando un formato de árbol binario.&lt;/p&gt;
&lt;p&gt;Lo que vamos a hacer a continuación es combinar los comandos &lt;code&gt;find&lt;/code&gt; y &lt;code&gt;file&lt;/code&gt;. ¿Y cómo hacemos eso? Fácil, con el comando &lt;code&gt;xargs&lt;/code&gt; y el uso del carácter &amp;ldquo;pipe&amp;rdquo; &lt;code&gt;|&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;El comando &lt;code&gt;xargs&lt;/code&gt; lee los argumentos desde la entrada estándar. Por ejemplo, si nosotros escribimos el siguiente comando:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;echo &amp;quot;file1.txt file2.txt file3.txt&amp;quot; | xargs touch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Esto creará los archivos &lt;code&gt;file1.txt&lt;/code&gt;, &lt;code&gt;file2.txt&lt;/code&gt;, y &lt;code&gt;file3.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/content/post/BasicCommandsOnLinuxPart1/img/level4/ejemplo.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;ejemplo.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Lo que estamos haciendo es lo siguiente: dada la salida del comando &lt;code&gt;echo&lt;/code&gt;, queremos crear archivos con el nombre de dicha salida. Entonces, se ejecuta &lt;code&gt;xargs touch&lt;/code&gt; y el resultado es que se crean tres archivos con los nombres &lt;code&gt;file1.txt&lt;/code&gt;, &lt;code&gt;file2.txt&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;Usando el carácter &amp;ldquo;or/pipe&amp;rdquo; &lt;code&gt;|&lt;/code&gt;, que es un carácter especial, se puede hacer que la salida de un comando sea la entrada de otro comando.&lt;/p&gt;
&lt;p&gt;Bien, una vez explicado esto, utilizamos lo que sabemos con el comando &lt;code&gt;find&lt;/code&gt;. Vamos a ejecutar la siguiente instrucción: &lt;code&gt;find . | xargs file&lt;/code&gt;. Usamos el punto &lt;code&gt;.&lt;/code&gt; en el comando &lt;code&gt;find&lt;/code&gt; para especificar que queremos que busque archivos desde la ruta en la que estamos.&lt;/p&gt;
&lt;p&gt;Si seguimos los pasos hasta aquí, ya tendremos listados todos los archivos y notamos que hay uno que es de tipo ASCII. Es el único dentro del directorio &lt;code&gt;inhere&lt;/code&gt;. Por lo tanto, abrimos ese archivo con el comando &lt;code&gt;cat&lt;/code&gt; y observamos que contiene la contraseña para el siguiente nivel.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/content/post/BasicCommandsOnLinuxPart1/img/level4/level4.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;level4&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;level-5---6&#34;&gt;Level 5 -&amp;gt; 6
&lt;/h1&gt;&lt;p&gt;Para este nivel, las instrucciones mencionan que el archivo que guarda la contraseña está en algún lugar dentro del directorio &amp;ldquo;inhere&amp;rdquo; y tiene las siguientes propiedades:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Es humanamente legible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tiene un tamaño de 1033 bytes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No es un archivo ejecutable.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vamos a usar el comando &lt;code&gt;find&lt;/code&gt;, ya que este comando tiene parámetros que nos pueden ayudar a encontrar el archivo siguiendo estas propiedades.&lt;/p&gt;
&lt;p&gt;El comando que vamos a utilizar es el siguiente:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;find inhere/ -readable -size 1033c ! -executable&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;El parámetro &lt;code&gt;-readable&lt;/code&gt; busca un archivo que sea legible. Con el parámetro &lt;code&gt;-size&lt;/code&gt; especificamos que sea de un determinado tamaño; puede ser en megas, gigas, etc., pero en esta ocasión es en bytes, por lo tanto, se usa la letra &amp;lsquo;c&amp;rsquo;. El carácter &lt;code&gt;!&lt;/code&gt; es para negar una condición, así que especificamos que no queremos que sea ejecutable. Si quitamos el signo de exclamación, le estamos indicando que queremos que sea ejecutable.&lt;/p&gt;
&lt;p&gt;Al ejecutar el comando, podemos ver que nos da un output de un archivo en la carpeta &amp;ldquo;maybehere07&amp;rdquo;, dentro del archivo &amp;ldquo;.file2&amp;rdquo;. Entonces, tenemos varias formas de leer este archivo.&lt;/p&gt;
&lt;p&gt;Usando &lt;code&gt;cat&lt;/code&gt; como lo haría un chad promedio, el comando es el siguiente:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cat $(find inhere/ -readable -size 1033c ! -executable)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Usando &lt;code&gt;cat&lt;/code&gt; de manera normal, el siguiente comando seria este:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cat inhere/maybehere07/.file2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/content/post/BasicCommandsOnLinuxPart1/img/level5/metodos.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;metodos.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Ambas maneras nos daran la contraseña, de igual manera puedes seguir buscando para tener un formato mas limpio con el comando xargs, como se ve a continuacion.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/content/post/BasicCommandsOnLinuxPart1/img/level5/ejemplo.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;ejemplo&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Una vez obtuvimos la contraseña nos vamos para el siguiente nivel.&lt;/p&gt;
&lt;p&gt;HWasnPhtq9AVKe0dmk45nxy20cvUa6EG&lt;/p&gt;
&lt;h1 id=&#34;level-6---7&#34;&gt;Level 6 -&amp;gt; 7
&lt;/h1&gt;&lt;p&gt;En construccion . . .&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Bienvenida</title>
        <link>http://localhost:1313/p/bienvenida/</link>
        <pubDate>Sun, 05 Nov 2023 12:51:10 -0500</pubDate>
        
        <guid>http://localhost:1313/p/bienvenida/</guid>
        <description>&lt;p&gt;
&lt;h2 id=&#34;bienvenids-a-mi-blog&#34;&gt;Bienvenid@s a mi blog!
&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Un pequeño rincón de la Informática, programacion y ciberseguridad&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;¡Hola a todos!&lt;/p&gt;
&lt;p&gt;Bienvenidos a mi blog sobre ciberseguridad y programación en C++, Python y Bash. Mi nombre es Gerardo Hernandez Gomez.&lt;/p&gt;
&lt;p&gt;Soy un apasionado de la programación y la ciberseguridad. Desde hace unos años, he estado explorando el mundo de la informática, y a lo largo de los años, he adquirido habilidades en programación y me entusiasma compartir mi conocimiento y experiencias contigo a través de este blog.&lt;/p&gt;
&lt;h2 id=&#34;sobre-el-blog&#34;&gt;Sobre el Blog
&lt;/h2&gt;&lt;p&gt;Este blog nació de mi interés por dos campos apasionantes: Ciberseguridad y la programación. Aquí, encontrarán una variedad de contenido relacionado con estos temas, diseñados para ayudar a principiantes y entusiastas experimentados por igual. Algunos de los tipos de contenido que pueden esperar incluyen:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Artículos sobre Ciberseguridad&lt;/strong&gt;:
Exploraré las últimas tendencias en seguridad informática y ofreceré consejos prácticos para protegerse en línea. Además, analizaré casos de estudio sobre ciberataques y compartiré ejemplos de intrusiones utilizando plataformas de formación en ciberseguridad como Hack The Box y TryHackMe. A medida que sigo aprendiendo y experimentando en este campo, compartiré mis hallazgos contigo.
&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Programación en C++, Python y Bash&lt;/strong&gt;:
Publicaré tutoriales, consejos y trucos sobre programación en estos lenguajes, desde los conceptos básicos hasta proyectos más avanzados. Como alguien que también está en constante aprendizaje, te invito a crecer junto conmigo en el mundo de la programación.
&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Herramientas y Recursos&lt;/strong&gt;:
Compartiré herramientas útiles, recursos gratuitos y enlaces a sitios web y libros relacionados con la ciberseguridad y la programación. Estoy convencido de que el acceso a recursos de calidad puede hacer que tu viaje de aprendizaje sea más eficiente y emocionante.
&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Experiencias Personales&lt;/strong&gt;:
De vez en cuando, compartiré mis propias experiencias y desafíos en el mundo de la informática, con la esperanza de inspirar y ayudar a otros. Puedes esperar escuchar sobre mis proyectos personales y lo que he aprendido a lo largo del camino.
&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;mi-motivación&#34;&gt;Mi Motivación
&lt;/h2&gt;&lt;p&gt;La razón detrás de la creación de este blog es simple: quiero fomentar la educación, la conciencia y la comunidad en los campos de la ciberseguridad y la programación. Creo firmemente que el conocimiento debe ser compartido y que todos, sin importar su nivel de habilidad, pueden beneficiarse de aprender sobre estos temas fascinantes.&lt;/p&gt;
&lt;h2 id=&#34;únanse-a-la-comunidad&#34;&gt;Únanse a la Comunidad
&lt;/h2&gt;&lt;p&gt;Estoy emocionado de embarcarme en este viaje contigo. Si eres un entusiasta de la ciberseguridad, un aprendiz de la programación o simplemente tienes curiosidad por estos temas, este es el lugar adecuado.&lt;/p&gt;
&lt;p&gt;¡Los invito a unirse a nuestra comunidad, seguirme en las redes sociales para estar al tanto de las actualizaciones y participar en la conversación!&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;Muchas gracias por visitar mi blog y por tomar el tiempo de leer este primer post. Espero que encuentres contenido valioso y que disfrutes de tu estadía aquí a medida que voy subiendo contenido.&lt;/p&gt;
&lt;p&gt;Si tienes alguna pregunta, sugerencia o un tema específico que te gustaría que cubra, no dudes en ponerse en contacto conmigo. Estoy ansioso por interactuar contigo y compartir nuestro entusiasmo por el conocimiento en la tecnologia!.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;b&gt; &lt;center&gt; ¡Hasta la próxima publicación! &lt;/center&gt; &lt;/b&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
